---
layout: post
title: "Ch10. 클래스"
subtitle: 클래스의 결합도를 낮추고 응집도를 높이자
date: 2019-04-08 23:28:00 +0900
categories: CleanCode
tags: CleanCode
---

# 클래스
---

#### 클래스 체계
클래스를 정의하는 표준 자바 관례에 따르면, 가장 먼저 `변수`  목록이 나온다. 
그 다음에는 `공개 함수` 가 나온다. 
`비공개 함수` 는 자신을 호출하는 공개 함수 직후에 넣는다. 
즉, **추상화 단계가 순차적으로 내려간다.**

##### 캡슐화
변수와 유틸리티 함수는 가능한 공개하지 않는 편이 낫지만 반드시 숨겨야 한다는 법칙도 없다. 하지만 캡슐화를 풀어주는 결정은 언제나 최후의 수단이다.

#### 클래스는 작아야 한다!
* 클래스는 크기가 작고 또 작아야 한다. 
* 클래스의 크기를 측정하는 척도는 클래스가 맡은 **책임**이다.
* 클래스 이름은 해당 클래스의 책임을 기술해야 한다.

##### 단일 책임 원칙 *Single Responsibility Principle, SRP*
`단일 책임 원칙` 은 **클래스나 모듈을 변경할 이유가 단 하나뿐이어야 한다**는 원칙이다.
> 큰 클래스 몇 개가 아니라 작은 클래스 여럿으로 이뤄진 시스템이 더 바람직하다. 작은 클래스는 각자 맡은 책임이 하나며, 변경할 이유가 하나며, 다른 작은 클래스와 협력해 시스템에 필요한 동작을 수행한다.

##### 응집도 *Cohesion*
* 클래스는 인스턴스 변수 수가 작아야 한다. 각 클래스 메서드는 클래스 인스턴스 변수를 하나 이상 사용해야 한다. 일반적으로 **메서드가 변수를 더 많이 사용할수록** 메서드와 클래스는 응집도가 더 높다.
* `응집도` 가 높다는 말은 클래스에 속한 메서드와 변수가 서로 의존하며 논리적인 단위로 묶인다는 의미이다.
* `함수를 작게, 매개변수 목록을 짧게` 라는 전략을 따르다 보면 때때로 몇몇 메서드만이 사용하는 인스턴스 변수가 아주 많아진다. 이는 십중팔구 **새로운 클래스로 쪼개야 한다는 신호**다.

<br>
##### Reference
- *CleanCode 애자일 소프트웨어 장인 정신*
