---
layout: post
title: "Ch05. 형식 맞추기"
subtitle: 형식을 깔끔하게 맞춰 코드를 짜자
date: 2019-02-25 22:45:13 +0900
categories: book clean-code
---

# 형식 맞추기
---
- 프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야 한다.
- 팀이 합의하여 **규칙**을 정하고 모두가 그 규칙을 따라야 한다.

#### 형식을 맞추는 목적
- 코드 형식은 **의사소통**의 일환이다. 의사소통은 전문 개발자의 일차적인 의무다.
- 구현한 코드들이 변경되더라도 개발자의 스타일과 규율은 잘 사라지지 않는다.

#### 적절한 행 길이를 유지하라
- 자바에서 파일 크기는 클래스 크기와 밀접하다.
- 일반적으로 작은 파일이 큰 파일보다 이해하기 쉽다.

##### 신문 기사처럼 작성하라
- 독자는 위에서 아래로 읽는다.
- 메소드 전체 내용을 요약하는 이름을 작성한다.
- 세세한 내용은 또 하나의 메소드로 분리한다.

##### 개념은 빈 행으로 분리하라
- 빈 행은 새로운 개념을 시작한다는 시각적 단서다.
- 다른 개념 사이에 `개행이 빠지면 가독성이 현저히 떨어진다.

##### 세로 밀집도
- 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다.

##### 수직 거리
- 같은 파일에 속할 정도로 밀접한 두 개념은 세로 거리로 연관성을 표현한다.
- 여기서 뜻하는 `연관성`이란 한 개념을 이해하는데 다른 개념이 중요한 정도다.
- 연관성이 깊은 두 개념이 멀리 떨어져 있으면 코드를 읽는 사람이 함수 연관관계와 동작 방식을 이해하기 위해 소스 파일 내 여기저기 찾느라 시간과 노력을 소모한다.

##### 수직분리

###### 변수 선언
- `변수`는 처음으로 사용하기 직전에 선언하며 수직으로 가까운 곳에 위치해야 한다.
- `비공개 함수`는 처음으로 호출한 직후에 정의해야 쉽게 눈에 띄어야 한다.

###### 인스턴스 변수
- `인스턴스 변수`는 클래스 맨 처음에 선언한다.

###### 종속함수
- 한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다.
- 또한 가능하다면 `호출하는 함수`를 호출되는 함수보다 먼저 배치해야 자연스럽게 읽힌다.
  ```java
  public void checkAdmin() {
    if (!isAdmin()) {
      throw new BusinessException();
    }
  }
  
  private boolean isAdmin() {
    return Role.ADMIN == this.roleName;
  }
  ```
  
###### 개념적 유사성
- 개념적인 친화도가 높을수록 코드를 가까이 배치한다.
- 종속적인 관계가 없더라도 기능적으로 유사하다.  
  ```java
  private boolean isAdmin() {
    return Role.ADMIN == this.roleName;
  }

  private boolean isManager() {
    return Role.MANAGER == this.roleName;
  }
  ```

##### 세로 순서
- **호출되는 순서대로 함수를 배치**하면 소스 코드 모듈이 고차원에서 저차원으로 자연스럽게 내려간다.
- 가장 중요한 개념을 표현하고나서 세세한 사항을 표현하면 함수 몇 개만 읽어도 개념을 파악하기 쉬워져서 세세한 사항까지 파고들 필요가 없다.

<br>
##### Reference
- *CleanCode 애자일 소프트웨어 장인 정신*
