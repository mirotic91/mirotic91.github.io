---
layout: post
title: "Ch11. 시스템"
subtitle: 시스템 수준에서도 깨끗함을 유지하자
date: 2019-04-11 22:26:00 +0900
categories: CleanCode
tags: CleanCode
---

# 시스템
---

#### 도시를 세운다면?
> 도시를 세운다면 온갖 세세한 사항을 혼자서 직접 관리할 수 있을까? 아마도 불가능하다.
각 분야를 관리하는 팀이 있고, 적절한 추상화와 모듈화가 되어 있기에 도시는 잘 돌아간다.

- 깨끗한 코드를 구현하면 낮은 추상화 수준에서 **관심사를 분리하기 쉬워진다.**    
높은 추상화 수준, 즉 `시스템` 수준에서도 깨끗함을 유지하는 방법을 살펴보자.

---

#### 시스템 제작과 시스템 사용을 분리하라
> 소프트웨어 시스템은 (애플리케이션 객체를 제작하고 의존성을 서로 연결하는) 준비 과정과 (준비 과정 이후에 이어지는) 런타임 로직을 분리해야 한다.

- 체계적이고 탄탄한 시스템을 만들고 싶다면 흔히 쓰는 좀스럽고 손쉬운 기법으로 모듈성을 깨서는 절대로 안 된다. 
설정 논리는 일반 실행 논리와 분리해야 모듈성이 높아진다.

##### Main 분리
생성과 관련한 코드는 모두 *main* 이나 *main* 이 호출하는 모듈로 옮기고, 나머지 시스템은 모든 객체가 생성되었고 모든 의존성이 연결되었다고 가정한다.
main 함수에서 시스템에 필요한 객체를 생성한 후 이를 애플리케이션에 넘긴다. 애플리케이션은 그저 객체를 사용할 뿐이다.
**애플리케이션은 *main* 이나 객체가 생성되는 과정을 전혀 모른다**는 뜻이다. 단지 모든 객체가 적절히 생성되었다고 가정한다.

##### 팩토리
때로는 객체가 생성되는 시점을 애플리케이션이 결정할 필요도 생긴다. 
이때는 `Abstract Factory 패턴` 을 사용한다. 그러면 생성하는 시점은 애플리케이션이 결정하지만 생성하는 코드는 애플리케이션이 모른다.

##### 의존성 주입
의존성 주입은 제어 역전 기법을 의존성 관리에 적용한 매커니즘이다. 
제어 역전에서는 한 객체가 맡은 보조 책임을 새로운 객체에게 전적으로 **위임**한다. 
새로운 객체는 넘겨받은 책임만 맡으므로 `단일 책임 원칙` 을 지키게 된다.
초기 설정은 시스템 전체에서 필요하므로 대개 *책임질* 메커니즘으로 *main* 루틴이나 특수 컨테이너를 사용한다.

- 진정한 의존성 주입은 클래스가 의존성을 해결하려 시도하지 않는다. 클래스는 완전히 수동적이다. 
대신에 의존성을 주입하는 방법으로 설정자 메서드나 생성자 인수를 제공한다. 
DI 컨테이너는 필요한 객체의 인스턴스를 만든 후 생성자 인수나 설정자 메서드를 사용해 의존성을 설정한다. 
  - ex) Spring Framework
- 대다수 DI 컨테이너는 필요할 때까지는 객체를 생성하지 않고, 
대부분은 계산 지연이나 비슷한 최적화에 쓸 수 있도록 팩토리를 호출하거나 프록시를 생성하는 방법을 제공한다. 
즉, 계산 지연 기법이나 이와 유사한 **최적화** 기법에서 이런 매커니즘을 사용할 수 있다.

---

#### 확장
처음부터 올바르게 시스템을 만들 수 있다는 믿음은 미신이다. 
대신에 점차 시스템을 조정하고 확정하면 된다. 
이것이 반복적이고 점진적인 애자일 방식의 핵심이다.  
  
`테스트 주도 개발, 리팩터링, 클린 코드` 는 코드 수준에서 시스템을 조정하고 확장하기 쉽게 만든다.

> 소프트웨어 시스템은 물리적인 시스템과 다르다. 관심사를 적절히 분리해 관리한다면 소프트웨어 아키텍처는 점진적으로 발전할 수 있다.

---

#### 횡단 관심사
- `AOP` 는 횡단 관심사에 대처해 모듈성을 확보하는 일반적인 방법론이다. 
  - 트랜잭션, 보안, 캐시 등

---

#### 자바 프록시
- 자바 프록시는 개별 객체나 클래스에서 메서드 호출을 감싸는 경우가 좋은 예다.
- 프록시를 사용하면 깨끗한 코드를 작성하기 어렵다.
- 프록시는 시스템 단위로 **실행 지점**을 명시하는 매커니즘도 제공하지 않는다.

---

#### 순수 자바 AOP 프레임워크
> **순수 자바**란 AspectJ를 사용하지 않는다는 뜻이다.

- 여러 자바 프레임워크는 내부적으로 프록시를 사용한다. 
- 스프링은 비즈니스 논리를 POJO로 구현한다. 
POJO는 순수하게 도메인에 초점을 맞춰 엔터프라이즈 프레임워크에 의존하지 않는다. 
따라서 테스트가 개념적으로 더 쉽고 간단하다.

---

#### AspectJ 관점
`AspectJ` 는 관점을 분리하는 강력하고 풍부한 도구 집합을 제공하긴 하지만, 새 도구를 사용하고 새 언어 문법과 사용법을 익혀야 한다는 단점이 있다.

---

#### 테스트 주도 시스템 아키텍처 구축
코드 수준에서 아키텍처 관심사를 분리할 수 있다면, 진정한 테스트 주도 아키텍처 구축이 가능해진다.
> 최선의 시스템 구조는 각기 POJO 객체로 구현되는 모듈화된 관심사 영역으로 구성된다. 
이렇게 서로 다른 영역은 해당 영역 코드에 최소한의 영향을 미치는 관점이나 유사한 도구를 사용해 통합한다. 
이런 구조 역시 코드와 마찬가지로 테스트 주도 기법을 적용할 수 있다.

---

#### 의사 결정을 최적화하라
모듈을 나누고 관심사를 분리하면 지엽적인 관리와 결정이 가능해진다.
> 관심사를 모듈로 분리한 POJO 시스템은 기민함을 제공한다. 
이런 기민함 덕택에 최신 정보에 기반해 최선의 시점에 최적의 결정을 내리기가 쉬워진다. 
또한 결정의 복잡성도 줄어든다.

---

#### 명백한 가치가 있을 때 표준을 현명하게 사용하라
> 표준을 사용하면 아이디어와 컴포넌트를 재사용하기 쉽고, 적절한 경험을 가진 사람을 구하기 쉬우며, 좋은 아이디어를 캡슐화하기 쉽고, 컴포넌트를 엮기 쉽다. 하지만 때로는 표준을 만드는 시간이 너무 오래 걸려 업계가 기다리지 못한다. 어떤 표준은 원래 표준을 제정한 목적을 잊어버리기도 한다.

---

#### 시스템은 도메인 특화 언어가 필요하다
도메인 특화 언어는 간단한 스크립트 언어나 표준 언어로 구현한 API를 가리킨다. 
> 도메인 특화 언어를 사용하면 고차원 정책에서 저차원 세부사항에 이르기까지 모든 추상화 수준과 모든 도메인을 POJO로 표현할 수 있다.

---

#### 결론
시스템 역시 깨끗해야 한다. 모든 추상화 단계에서 의도는 명확히 표현해야 한다.  
그러려면 POJO를 작성하고 관점 혹은 관점과 유사한 매커니즘을 사용해 각 구현 관심사를 분리해야 한다.

<br>
##### Reference
- *CleanCode 애자일 소프트웨어 장인 정신*
