---
layout: post
title: "Ch09. 단위 테스트"
subtitle: 테스트 코드도 깔끔하게 관리하자
date: 2019-03-29 23:48:00 +0900
categories: CleanCode
tags: CleanCode
---

# 단위 테스트
---

`애자일`과 `TDD` 덕분에 단위 테스트를 자동화하는 프로그래머들이 이미 많아졌으며 점점 더 늘어나는 추세다.
하지만 테스트를 추가하려고 서두르는 바람에 제대로 된 테스트 케이스를 작성해야 한다는 좀 더 중요한 사실을 놓쳐버렸다.

#### TDD *(Test Driven Development)* 법칙 세가지
1. 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다.
2. 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.
3. 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.

> 이렇게 일하면 실제 코드를 사실상 전부 테스트하는 테스트 케이스가 나온다.  
하지만 실제 코드와 맞먹을 정도로 방대한 테스트 코드는 심각한 관리 문제를 유발하기도 한다.

#### 깨끗한 테스트 코드 유지하기
- 실제 코드가 진화하면 테스트 코드도 변해야 한다. 그런데 테스트 코드가 지저분할수록 **변경**하기 어려워진다.
- 테스트 케이스를 작성하지 않게 되면 코드 수정에 대한 사실을 **검증**하지 못한다. 
의도하지 않은 결함 수가 많아지면 개발자는 변경을 주저한다. 
변경하면 득보다 해가 크다 생각해 더 이상 코드를 정리하지 않는다. 
그러면서 코드가 망가지기 시작한다.
- 테스트 코드는 실제 코드 못지 않게 중요하다. 그만큼 깨끗하게 짜야 한다.

##### 테스트는 유연성, 유지보수성, 재사용성을 제공한다
- 코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 바로 `단위 테스트`다.
- 테스트 케이스가 있으면 변경이 쉬워진다.

#### 깨끗한 테스트 코드
- 깨끗한 테스트 코드를 만들려면 `가독성`이 가장 중요하다. 어쩌면 가독성은 실제 코드보다 테스트 코드에 더더욱 중요하다.    
가독성을 높이려면 명료성, 단순성, 풍부한 표현력이 필요하다.
- 테스트 코드는 최소의 표현으로 많은 것을 나타내야 한다.
- `BUILD-OPERATE-CHECK` 패턴  
(테스트 자료 생성 - 테스트 자료 조작 - 조작한 결과 검증) 
- 코드를 읽는 사람은 세세한 코드에 주눅들고 헷갈릴 필요 없이 코드가 수행하는 기능을 재빨리 이해할 수 있다.

##### 도메인에 특화된 테스트 언어
- 테스트를 구현하는 당사자와 나중에 테스트를 읽어볼 독자를 도와주는 테스트 언어
- 숙련된 개발자라면 자기 코드를 좀 더 간결하고 표현력이 풍부한 코드로 리팩터링해야 마땅하다.

##### 이중 표준
- 테스트 API 코드에 적용하는 표준은 실제 코드에 적용하는 표준과 확실히 다르다.  
단순하고, 간결하고, 표현력이 풍부해야 하지만, 실제 코드만큼 효율적일 필요는 없다. 실제 환경이 아니라 **테스트 환경에서 돌아가는 코드**이기 때문이다.
- 실제 환경에서는 절대로 안 되지만 테스트 환경에서는 전혀 문제없는 방식이 있다. 메모리나 CPU 효율과 관련 있는 경우다. 코드의 깨끗함과는 철저히 무관하다. 
  - ex) StringBuffer의 append 메서드가 String의 + 연산자 보다  
  효율성은 좋지만 가독성은 떨어지는 편이다.

#### 테스트 당 assert 하나
- `assert` 문이 단 하나인 함수는 결론이 하나라서 코드를 이해하기 쉽고 빠르다.
- 함수 이름에 `given-when-then` 관례를 사용하면 테스트 코드를 읽기 쉬워진다.
- 불행히도 테스트를 분리하면 중복되는 코드가 많아지지만 `Template Method` 패턴을 사용하면 중복을 제거할 수 있다.   
> given/when 부분을 부모 클래스에 두고 then 부분을 자식 클래스에 두면 된다.  
아니면 완전히 독자적인 테스트 클래스를 만들어 @Before 함수에 given/when 부분을 넣고 @Test 함수에 then 부분을 넣어도 된다.
하지만 배보다 배꼽이 더 크다. 결국 assert 문을 여럿 사용하는 편이 좋다고 생각한다.
- `단일 assert 문`이라는 규칙이 훌륭한 지침이라 생각하지만 때로는 주저 없이 여러 assert 문을 넣기도 한다.
단지 assert 문 개수는 최대한 줄여야 좋다는 생각이다.

##### 테스트 당 개념 하나
- 어쩌면 *테스트 함수마다 한 개념만 테스트하라* 규칙이 더 옳다.
- 한 테스트 함수에서 여러 개념을 테스트하는 것은 바람직하지 못하다. 독자적인 테스트로 분리해야 한다.
- 그러므로 가장 좋은 규칙은 **개념 당 assert 문 수를 최소로 줄여라** 와  
**테스트 함수 하나는 개념 하나만 테스트하라** 이다.

#### F.I.R.S.T *(깨끗한 테스트의 다섯 가지 규칙)*
`Fast` : 테스트는 **빨리** 돌아야 한다. 테스트가 느리면 자주 돌릴 엄두를 못 낸다.  
`Independent` : 각 테스트는 서로 의존하면 안 된다. **독립적**으로 그리고 어떤 순서로 실행해도 괜찮아야 한다.  
`Repeatable` : 테스트는 어떤 환경에서도 **반복 가능**해야 한다. 테스트가 돌아가지 않는 환경이 하나라도 있다면 테스트가 실패한 이유를 둘러댈 변명이 생긴다.  
`Self-Validating` : 테스트는 **부울 값**으로 결과를 내야 한다. 테스트가 스스로 성공과 실패를 가늠하지 않는다면 판단은 주관적이 되며 지루한 수작업 평가가 필요하게 된다.  
`Timely` : 테스트는 **적시에** 작성해야 한다. 단위 테스트는 테스트하려는 실제 코드를 구현하기 직전에 구현한다. 
실제 코드를 구현한 다음에 테스트 코드를 만들면 실제 코드가 테스트하기 어렵다는 사실을 발견할지도 모른다. 
어떤 실제 코드는 테스트하기 너무 어렵다고 판명날지 모른다. 테스트가 불가능하도록 실제 코드를 설계할지도 모른다.  

#### 결론
**테스트 코드**는 실제 코드만큼이나 중요하다. 그러므로 테스트 코드는 지속적으로 깨끗하게 관리하자.

<br>
##### Reference
- *CleanCode 애자일 소프트웨어 장인 정신*
