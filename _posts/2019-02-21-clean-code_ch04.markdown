---
layout: post
title: "Ch04. 주석"
date: 2019-02-21 22:55:53 +0900
categories: book clean-code
---

# 주석
---

`나쁜 코드에 주석을 달지마라. 새로 짜라.`
> 주석은 언제나 실패를 의미한다. **코드로 의도를 표현할 방법을 찾지 못해 할 수 없이 주석을 사용한다.**
주석은 오래될수록 코드에서 멀어진다. 주석까지 유지보수하기란 현실적으로 불가능하니까.
부정확한 주석은 독자를 현혹하고 오도한다. 코드만이 정확한 정보를 제공하는 유일한 출처다.
그러므로 우리는 주석을 가능한 줄이도록 꾸준히 노력해야 한다.

#### 주석은 나쁜 코드를 보완하지 못한다
- 표현력이 풍부하고 깔끔하며 주석이 거의 없는 코드가, 복잡하고 어수선하며 주석이 많이 달린 코드보다 훨씬 좋다.

#### 코드로 의도를 표현하라!
- 코드만으로 의도를 설명하기 어려운 경우가 존재한다.  
조금 더 생각하면 코드로 대다수 의도를 표현할 수 있다.

```java
# before
// 직원에게 복지 혜택을 받을 자격이 있는지 검사한다.
if ((employee.flags & HOURLY_FLAG) && employee.age > 65)
# after
if (employee.isEligibleForFullBenefits())
```

#### 좋은 주석
어떤 주석은 필요하거나 유익하다.

##### 법적인 주석
- 저작권, 소유권 정보 등을 명시한다.  
가능하다면 표준 라이선스나 외부 문서를 참조해도 되겠다.

##### 정보를 제공하는 주석
- 시각과 날짜 형식 등을 직관적으로 표현 가능하다.

##### 의도를 설명하는 주석
- 코드를 결정하게된 의도를 설명한다.

##### 의미를 명료하게 밝히는 주석
- 모호한 인수나 반환값은 그 의미를 좋게 표현하면 이해하기 쉬워진다.
  - ex) assertTrue(a.compareTo(a) == 0); // a == a
- 주석이 옳은지 신뢰할 수 없어 위험하기도 하다.

##### 결과를 경고하는 주석
- 특정 테스트 케이스를 꺼야할 수 있다.
  - ex) @Ignore("not ready yet")

##### TODO 주석
- '앞으로 할 일'을 남겨두면 편하다. 프로그래머가 당장 구현하기 어려운 업무를 기술한다.
  - ex) // **TODO** 이메일 발송 구현
- 어떤 용도이든 시스템에 나쁜 코드를 남겨 놓는 핑계가 되어서는 안된다.
- 요즘 나오는 대다수 IDE는 TODO 주석 전부를 찾아 보여주는 기능을 제공하므로 주석을 잊어버릴 염려는 없다.
그러므로 주기적으로 TODO 주석을 점검해 없애도 괜찮은 주석은 없애라고 권한다.

##### 중요성을 강조하는 주석
- 중요성을 강조하기 위해서도 사용한다.

##### 공개 API에서 Javadocs
- 설명이 잘 된 공개 API는 참으로 유용하고 만족스럽다.
- 독자를 오도하거나, 잘못 위치하거나, 그릇된 정보를 전달할 가능성이 존재하니 유의하여 작성하도록 한다.

<br>
##### Reference
- *CleanCode 애자일 소프트웨어 장인 정신*
