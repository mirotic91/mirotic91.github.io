---
layout: post
title: "Ch12. 창발성"
subtitle: 단순한 설계 규칙을 지키자
date: 2019-04-17 22:06:00 +0900
categories: CleanCode
tags: CleanCode
---

# 창발성
---

#### 창발적 설계로 깔끔한 코드를 구현하자
착실하게 따르면 우수한 설계가 나오는 단순한 규칙 *(중요도 순)*
1. 모든 **테스트**를 실행한다.
2. **중복**을 없앤다.
3. 프로그래머 **의도**를 표현한다.
4. **클래스와 메서드 수**를 최소로 줄인다.

---

#### 단순한 설계 규칙 1: 모든 테스트를 실행하라

- 테스트가 가능한 시스템을 만들려고 하면 크기가 작고 목적 하나만 수행하는 클래스가 나온다.
- 테스트 케이스가 많을수록 개발자는 테스트가 더 쉽게 코드를 작성한다.
- 결합도가 높으면 테스트 케이스를 작성하기 어려우므로 개발자는 `DIP` 와 같은 원칙을 적용하는 등 결합도를 낮춘다. 따라서 설계 품질은 더욱 높아진다.

**즉, 테스트 케이스를 작성하면 설계 품질이 높아진다.**

---

#### 단순한 설계 규칙 2~4: 리팩터링
- 테스트 케이스를 모두 작성했다면 코드를 점진적으로 리팩터링 해나간다.
- 테스트 케이스가 있기에 코드를 정리하며 시스템이 깨질까 걱정할 필요가 없다.

> 리팩터링 단계에서는 소프트웨어 설계 품질을 높이는 기법이라면 무엇이든 적용해도 괜찮다.
응집도를 높이고, 결합도를 낮추고, 관심사를 분리하고, 시스템 관심사를 모듈로 나누고, 함수와 클래스 크기를 줄이고, 더 나은 이름을 선택하는 등 다양한 기법을 동원한다.
또한 나머지 단순한 설계 규칙인 중복을 제거하고, 프로그래머 의도를 표현하고, 클래스와 메서드 수를 최소로 줄이는 단계이기도 하다.

<br>
##### Reference
- *CleanCode 애자일 소프트웨어 장인 정신*
